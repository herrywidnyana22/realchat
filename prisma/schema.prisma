generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashPassword  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi ke list chat
  conversationsIds String[]       @db.ObjectId
  conversations    Conversation[] @relation(fields: [conversationsIds], references: [id])

  // relasi ke chat untuk read chat
  seenChatIds String[] @db.ObjectId
  seenChats   Chat[]   @relation("Seen", fields: [seenChatIds], references: [id])

  accounts Account[]
  chats    Chat[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // relasi ke user untuk pemilik akun
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  lastChatAt DateTime @default(now())
  name       String?
  isGroup    Boolean?

  // relasi ke chat
  chatsIds String[] @db.ObjectId
  chats    Chat[]

  // relasi ke user
  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  // relasi ke user untuk read chat
  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  // relasi ke group chat
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // relasi ke User untuk nama pengirim
  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
